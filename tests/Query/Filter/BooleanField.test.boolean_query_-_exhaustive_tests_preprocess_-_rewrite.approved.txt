Results of preprocessing boolean expressions




Input:
'"description includes d1" AND "description includes d2"'
=>
Result:
{
    "simplifiedLine": "f1",
    "filters": {
        "f1": "\"description includes d1\" AND \"description includes d2\""
    }
}

--------------------------------------------------------


Input:
'( (description includes a) AND (description includes b) ) AND (description includes c)'
=>
Result:
{
    "simplifiedLine": "( (f1) AND (f2) ) AND (f3)",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c"
    }
}

--------------------------------------------------------


Input:
'( (description includes a) AND (description includes b) AND (description includes c) ) OR ( (description includes d) AND (description includes e) AND (description includes f) )'
=>
Result:
{
    "simplifiedLine": "( (f1) AND (f2) AND (f3) ) OR ( (f4) AND (f5) AND (f6) )",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c",
        "f4": "description includes d",
        "f5": "description includes e",
        "f6": "description includes f"
    }
}

--------------------------------------------------------


Input:
'( (description includes a) OR (description includes b) ) OR (description includes c)'
=>
Result:
{
    "simplifiedLine": "( (f1) OR (f2) ) OR (f3)",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c"
    }
}

--------------------------------------------------------


Input:
'( (description includes a) OR (description includes b) OR (description includes c) ) AND ( (description includes d) OR (description includes e) OR (description includes f) )'
=>
Result:
{
    "simplifiedLine": "( (f1) OR (f2) OR (f3) ) AND ( (f4) OR (f5) OR (f6) )",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c",
        "f4": "description includes d",
        "f5": "description includes e",
        "f6": "description includes f"
    }
}

--------------------------------------------------------


Input:
'( (filter by function task.description.includes('a')) OR (filter by function task.description.includes('b')) OR (filter by function task.description.includes('c')) ) AND ( (filter by function task.description.includes('d')) OR (filter by function task.description.includes('e')) OR (filter by function task.description.includes('f')) )'
=>
Result:
{
    "simplifiedLine": "( (f1)) OR (f2)) OR (f3)) ) AND ( (f4)) OR (f5)) OR (f6)) )",
    "filters": {
        "f1": "filter by function task.description.includes('a'",
        "f2": "filter by function task.description.includes('b'",
        "f3": "filter by function task.description.includes('c'",
        "f4": "filter by function task.description.includes('d'",
        "f5": "filter by function task.description.includes('e'",
        "f6": "filter by function task.description.includes('f'"
    }
}

--------------------------------------------------------


Input:
'( description includes a )   AND ( (description includes b)  AND (description includes c) )'
=>
Result:
{
    "simplifiedLine": "( f1 )   AND ( (f2)  AND (f3) )",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c"
    }
}

--------------------------------------------------------


Input:
'( description includes a )   OR  ( (description includes b)  OR  (description includes c) )'
=>
Result:
{
    "simplifiedLine": "( f1 )   OR  ( (f2)  OR  (f3) )",
    "filters": {
        "f1": "description includes a",
        "f2": "description includes b",
        "f3": "description includes c"
    }
}

--------------------------------------------------------


Input:
'(((((description includes #context/location1)))))'
=>
Result:
{
    "simplifiedLine": "(((((f1)))))",
    "filters": {
        "f1": "description includes #context/location1"
    }
}

--------------------------------------------------------


Input:
'(((((NOT  ( description includes d1 ))))))'
=>
Result:
{
    "simplifiedLine": "(((((NOT  ( f1 ))))))",
    "filters": {
        "f1": "description includes d1"
    }
}

--------------------------------------------------------


Input:
'(description includes #context/location1)'
=>
Result:
{
    "simplifiedLine": "(f1)",
    "filters": {
        "f1": "description includes #context/location1"
    }
}

--------------------------------------------------------


Input:
'(description includes #context/location1) OR (description includes #context/location2 ) OR (  description includes #context/location3 ) OR   (  description includes #context/location4 )'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2 ) OR (  f3 ) OR   (  f4 )",
    "filters": {
        "f1": "description includes #context/location1",
        "f2": "description includes #context/location2",
        "f3": "description includes #context/location3",
        "f4": "description includes #context/location4"
    }
}

--------------------------------------------------------


Input:
'(description includes 1) AND (description includes 2) AND (description includes 3)'
=>
Result:
{
    "simplifiedLine": "(f1) AND (f2) AND (f3)",
    "filters": {
        "f1": "description includes 1",
        "f2": "description includes 2",
        "f3": "description includes 3"
    }
}

--------------------------------------------------------


Input:
'(description includes 1) AND (description includes 2) AND (description includes 3) AND (description includes 4) AND (description includes 5) AND (description includes 6) AND (description includes 7) AND (description includes 8) AND (description includes 9)'
=>
Result:
{
    "simplifiedLine": "(f1) AND (f2) AND (f3) AND (f4) AND (f5) AND (f6) AND (f7) AND (f8) AND (f9)",
    "filters": {
        "f1": "description includes 1",
        "f2": "description includes 2",
        "f3": "description includes 3",
        "f4": "description includes 4",
        "f5": "description includes 5",
        "f6": "description includes 6",
        "f7": "description includes 7",
        "f8": "description includes 8",
        "f9": "description includes 9"
    }
}

--------------------------------------------------------


Input:
'(description includes 1)   AND   (description includes 2)   AND   (description includes 3)   AND   (description includes 4)   AND   (description includes 5)   AND   (description includes 6)   AND   (description includes 7)   AND   (description includes 8)   AND   (description includes 9)'
=>
Result:
{
    "simplifiedLine": "(f1)   AND   (f2)   AND   (f3)   AND   (f4)   AND   (f5)   AND   (f6)   AND   (f7)   AND   (f8)   AND   (f9)",
    "filters": {
        "f1": "description includes 1",
        "f2": "description includes 2",
        "f3": "description includes 3",
        "f4": "description includes 4",
        "f5": "description includes 5",
        "f6": "description includes 6",
        "f7": "description includes 7",
        "f8": "description includes 8",
        "f9": "description includes 9"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) AND (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) AND (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "priority medium"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) AND NOT (description includes d2)'
=>
Result:
{
    "simplifiedLine": "(f1) AND NOT (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "description includes d2"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) AND   NOT (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) AND   NOT (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "priority medium"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) OR (description includes d2)'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "description includes d2"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) OR (description includes d2) OR (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2) OR (f3)",
    "filters": {
        "f1": "description includes d1",
        "f2": "description includes d2",
        "f3": "priority medium"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) OR (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "priority medium"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) OR NOT (description includes d2)'
=>
Result:
{
    "simplifiedLine": "(f1) OR NOT (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "description includes d2"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) OR   NOT (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) OR   NOT (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "priority medium"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) XOR (description includes d2)'
=>
Result:
{
    "simplifiedLine": "(f1) XOR (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "description includes d2"
    }
}

--------------------------------------------------------


Input:
'(description includes d1) XOR (priority medium)'
=>
Result:
{
    "simplifiedLine": "(f1) XOR (f2)",
    "filters": {
        "f1": "description includes d1",
        "f2": "priority medium"
    }
}

--------------------------------------------------------



Input:
'AND (description includes d1)'
=>
Result:
{
    "simplifiedLine": "f1)",
    "filters": {
        "f1": "AND (description includes d1"
    }
}

--------------------------------------------------------


Input:
'NOT (description blahblah d1)'
=>
Result:
{
    "simplifiedLine": "NOT (f1)",
    "filters": {
        "f1": "description blahblah d1"
    }
}

--------------------------------------------------------


Input:
'NOT  ( description includes d1 )'
=>
Result:
{
    "simplifiedLine": "NOT  ( f1 )",
    "filters": {
        "f1": "description includes d1"
    }
}

--------------------------------------------------------


Input:
'NOT   (  happens before blahblahblah  )'
=>
Result:
{
    "simplifiedLine": "NOT   (  f1  )",
    "filters": {
        "f1": "happens before blahblahblah"
    }
}

--------------------------------------------------------


Input:
'OR (description includes d1)'
=>
Result:
{
    "simplifiedLine": "f1)",
    "filters": {
        "f1": "OR (description includes d1"
    }
}

--------------------------------------------------------


Input:
'(description includes SHOULD NOT BE RECOGNISED AS A BOOLEAN)AND(description includes BECAUSE THERE ARE NO SPACES AROUND THE 'AND' OPERATOR)'
=>
Result:
{
    "simplifiedLine": "(f1)AND(f2)",
    "filters": {
        "f1": "description includes SHOULD NOT BE RECOGNISED AS A BOOLEAN",
        "f2": "description includes BECAUSE THERE ARE NO SPACES AROUND THE 'AND' OPERATOR"
    }
}

--------------------------------------------------------



Input:
'(path includes (some example) OR (path includes )some example()'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2)",
    "filters": {
        "f1": "path includes (some example",
        "f2": "path includes )some example("
    }
}

--------------------------------------------------------


Input:
'(path includes (some example)) OR (path includes )some example()'
=>
Result:
{
    "simplifiedLine": "(f1)) OR (f2)",
    "filters": {
        "f1": "path includes (some example",
        "f2": "path includes )some example("
    }
}

--------------------------------------------------------


Input:
'(path includes )some example() OR (path includes (some example))'
=>
Result:
{
    "simplifiedLine": "(f1) OR (f2))",
    "filters": {
        "f1": "path includes )some example(",
        "f2": "path includes (some example"
    }
}

--------------------------------------------------------


Input:
'(path includes ()some example()) OR (path includes ((some example)))'
=>
Result:
{
    "simplifiedLine": "(f1)) OR (f2)))",
    "filters": {
        "f1": "path includes ()some example(",
        "f2": "path includes ((some example"
    }
}

--------------------------------------------------------



Input:
'( description regex matches /(buy|order|voucher|lakeland|purchase|\spresent)/i ) OR ( path includes Home/Shopping )'
=>
Result:
{
    "simplifiedLine": "( f1 ) OR ( f2 )",
    "filters": {
        "f1": "description regex matches /(buy|order|voucher|lakeland|purchase|\\spresent)/i",
        "f2": "path includes Home/Shopping"
    }
}

--------------------------------------------------------


Input:
'( filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type) ) OR ( filter by function const date = task.due.moment; return date ? !date.isValid() : false; ) OR ( filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false ) OR ( filter by function task.urgency.toFixed(2) === 1.95.toFixed(2) ) OR ( filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁') ) OR ( filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase() ) OR ( filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false ) OR ( filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false; )'
=>
Result:
{
    "simplifiedLine": "( f1) ) OR ( f2 ) OR ( f3 ) OR ( f4) ) OR ( f5) ) OR ( f6) ) OR ( f7 ) OR ( f8 )",
    "filters": {
        "f1": "filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type",
        "f2": "filter by function const date = task.due.moment; return date ? !date.isValid() : false;",
        "f3": "filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false",
        "f4": "filter by function task.urgency.toFixed(2) === 1.95.toFixed(2",
        "f5": "filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁'",
        "f6": "filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase(",
        "f7": "filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false",
        "f8": "filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false;"
    }
}

--------------------------------------------------------


Input:
'( filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type); ) OR ( filter by function const date = task.due.moment; return date ? !date.isValid() : false; ) OR ( filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false; ) OR ( filter by function task.urgency.toFixed(2) === 1.95.toFixed(2); ) OR ( filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁'); ) OR ( filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase(); ) OR ( filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false; ) OR ( filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false; )'
=>
Result:
{
    "simplifiedLine": "( f1 ) OR ( f2 ) OR ( f3 ) OR ( f4 ) OR ( f5 ) OR ( f6 ) OR ( f7 ) OR ( f8 )",
    "filters": {
        "f1": "filter by function ! 'NON_TASK,CANCELLED'.includes(task.status.type);",
        "f2": "filter by function const date = task.due.moment; return date ? !date.isValid() : false;",
        "f3": "filter by function task.due.moment?.isSameOrBefore(moment(), 'day') || false;",
        "f4": "filter by function task.urgency.toFixed(2) === 1.95.toFixed(2);",
        "f5": "filter by function (!task.isRecurring) && task.originalMarkdown.includes('🔁');",
        "f6": "filter by function task.file.path.toLocaleLowerCase() === 'TASKS RELEASES/4.1.0 RELEASE.MD'.toLocaleLowerCase();",
        "f7": "filter by function const taskDate = task.due.moment; const now = moment(); return taskDate?.isSame(now, 'day') || ( !taskDate && task.heading?.includes(now.format('YYYY-MM-DD')) ) || false;",
        "f8": "filter by function const wanted = '#context/home'; return task.heading?.includes(wanted) || task.tags.find( (tag) => tag === wanted ) && true || false;"
    }
}

--------------------------------------------------------


